buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.5'
    }
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

docker {
    registryCredentials {
        username = project.docker_user
        password = project.docker_password
        email = project.docker_email
    }
}

task copyDockerFiles(type: Copy) {
    description = "Copy Dockerfile and required data to build directory"
    from 'src/main/docker'
    from "${project.buildDir}/libs"
    into { "${project.buildDir}/docker" }
    include "*"
    exclude "**/*.yml"
}
def dockerImageName = "docker.iteratec.io/otto/teamdojo";
def dockerTags = ["$dockerImageName:${project.version}".toString()]
if (project.version.contains('SNAPSHOT')) {
    dockerTags.push("$dockerImageName:next".toString());
} else {
    dockerTags.push("$dockerImageName:latest".toString());
}

task buildDocker(type: DockerBuildImage, dependsOn: 'copyDockerFiles') {
    description = "Package application as Docker image"
    group = "Docker"
    inputDir = project.file("${project.buildDir}/docker")
    tags = dockerTags
}

task pushDockerVersion(type: DockerPushImage, dependsOn: 'buildDocker') {
    imageName = dockerTags[0]
}

task pushDocker(type: DockerPushImage, dependsOn: 'pushDockerVersion') {
    imageName = dockerTags[1]
}
