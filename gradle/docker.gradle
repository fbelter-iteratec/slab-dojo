buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.5'
    }
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

docker {
    registryCredentials {
        username = project.docker_user
        password = project.docker_password
        email = project.docker_email
    }
}

task copyDockerFiles(type: Copy) {
    description = "Copy Dockerfile and required data to build directory"
    from 'src/main/docker'
    from "${project.buildDir}/libs"
    into { "${project.buildDir}/docker" }
    include "*"
    exclude "**/*.yml"
}
def dockerImageName = project.docker_repository ? project.docker_repository + "/" : "" + "otto/teamdojo";
ext.getDockerImageNameWithTags = {
    def dockerTags = ["$dockerImageName:${version}".toString()]
    if (version.toString().contains('SNAPSHOT')) {
        dockerTags.push("$dockerImageName:next".toString());
    } else {
        dockerTags.push("$dockerImageName:latest".toString());
    }
    return dockerTags;
}
def dockerImageNameWithTags = getDockerImageNameWithTags();

task buildDocker(type: DockerBuildImage, dependsOn: 'copyDockerFiles') {
    description = "Package application as Docker image"
    group = "Docker"
    inputDir = project.file("${project.buildDir}/docker")
    tags = dockerImageNameWithTags
}

task pushDockerVersion(type: DockerPushImage, dependsOn: 'buildDocker') {
    description = "Pushes the image with the concrete version number"
    imageName = dockerImageNameWithTags[0];
}

task pushDocker(type: DockerPushImage, dependsOn: 'pushDockerVersion') {
    description = "Pushes the image with tag 'latest' or 'next'"
    imageName = dockerImageNameWithTags[1];
}
