import java.util.regex.Matcher
import java.util.regex.Pattern


task dojoProjectVersion(dependsOn: 'generateGitProperties') {
    doLast {
        //String branch = project.ext.gitProps['git.branch'];
        //String tag = project.ext.gitProps['git.closest.tag.name'];
        String branch = 'develop';
        String tag = null;
        GitInfo gitInfo = new GitInfo(project.version, branch, tag);
        project.version = new ProjectVersion(project.version, gitInfo.getQualifier()).toString()
        println("Team Dojo Project Version is $project.version")
    }
}
bootBuildInfo.dependsOn(dojoProjectVersion);


class ProjectVersion {
    String version
    String qualifier

    ProjectVersion(String version, String qualifier) {
        this.version = version;
        this.qualifier = qualifier;
    }

    @Override
    String toString() {
        "$version$qualifier"
    }
}

class GitInfo {
    String version;
    String branch;
    String tag;
    String qualifier = "-SNAPSHOT";
    Pattern SUFFIXES_PATTERN = Pattern.compile("\\d+\\.\\d+\\.\\d+-.+-(\\d)-[a-z0-9]+");

    GitInfo(String version, String branch, String tag) {
        this.version = version.toString();
        this.branch = branch;
        this.tag = tag;
        this.buildQualifier();
    }

    private void buildQualifier() {
        this.branch = this.branch != null ? this.branch : 'unknown';
        if (branch.equals("master") || branch.contains("origin/master")) {
            this.getTag();
            this.qualifier = "-RELEASE";
        } else if (branch.startsWith("release/") || branch.contains("origin/release/")) {
            String tag = this.getTag();
            Matcher matcher = SUFFIXES_PATTERN.matcher(tag);
            if (matcher.find()) {
                String distance = matcher.group(1);
                this.qualifier = tag.substring(version.length(), matcher.start(1) - 1);
            } else {
                this.qualifier = tag.substring(version.length());
            }
        } else if (!branch.equals("develop") && !branch.contains("origin/develop")) {
            this.qualifier += "-" + branch.replaceAll("/", "-").replaceFirst("origin", "");
        }
    }

    private String getTag() {
        if (this.tag == null || !this.tag.contains(version)) {
            throw new Exception("Unable to get version from tag (" + this.tag + ") from branch (" + this.branch + ")");
        }
        return this.tag;
    }

    String getQualifier() {
        return qualifier;
    }
}
